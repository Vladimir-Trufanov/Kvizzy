/** Arduino UNO                                           *** Motor_kru.cpp ***
 * 
 * Драйвер электромотора с использованием широтно-импульсной модуляции на 
 * двух n-канальных полевых транзисторов IRFZ24N и двух p-канальных полевых 
 * транзисторов IRF9Z24N.
 * 
 * v2.1, 26.03.2024                                   Автор:      Труфанов В.Е.
 * Copyright © 2024 tve                               Дата создания: 24.03.2024
**/

#include "Motor_kru.h" 

// ****************************************************************************
// *         Управлять скоростью мотора и направлением его вращения           *
// ****************************************************************************
void MotorKrutjak::Driver(int _ValRes) 
{
   ValRes = _ValRes; // считали условное напряжение
   // Отрезаем переход через пограничные значения
   if (ValRes<LowRes)  ValRes=LowRes;  // 0
   if (ValRes>HighRes) ValRes=HighRes; // 1023  
   // Расчитываем напряжения ШИМ
   if (ValRes<512)
   {
      ValPWM_L = map(ValRes,0,512,255,0); ValPWM_R=0;   
   }
   else
   {
      ValPWM_L = 0; ValPWM_R = map(ValRes,512,1023,0,255); 
   }
   // Если мотор подключен к драйверу, вращаем мотор
   if (isConnect==true)
   {
      analogWrite(PinPWM_L,ValPWM_L);     
      analogWrite(PinPWM_R,ValPWM_R);        
   }
}
// ****************************************************************************
// *                           Получить состояние драйвера                    *
// ****************************************************************************
Condition MotorKrutjak::Take()
{
   Condition values;
   values.ValRes   = ValRes;   // 1024;
   values.ValPWM_L = ValPWM_L; // 250;
   values.ValPWM_R = ValPWM_R; // 10;
   return values;
}
// ****************************************************************************
// *              Остановить мотор и отключить его от драйвера                *
// ****************************************************************************
void MotorKrutjak::Disconnect(uint32_t _MonitorFreq=9600) 
{
   // Устанавливаем признак отключения драйвера
   isConnect=false; 
   // Останавливаем двигатель
   analogWrite(PinPWM_L,0);     
   analogWrite(PinPWM_R,0); 
}
// ****************************************************************************
// *                        Подключить мотор к драйверу                       *
// ****************************************************************************
void MotorKrutjak::Connect() 
{
   isConnect=true; 
}
// ****************************************************************************
// *                            Протестировать мотор                          *
// *            (метод запускается из цикла с интервалом в 1 сек,             *
// *                    когда поступает команда с ИК пульта)                  *
// ****************************************************************************
/*
// Определяем счетчик секунд теста и матрицу тестирования двигателя.
// В тесте на каждую скорость выделяется 5 секунд. В матрице указывается 
// с какой секунды теста запускается указанная скорость.
int incTest;
byte maxColTest=14;
byte maxSecTest=70; 
int tblTest[70][2] = {{0,600},{5,700},{10,800},{15,900},{20,1000},{25,1100},{30,512},{35,412},{40,312},{45,212},{50,112},{55,12},{60,-12},{65,512}};
*/
void MotorKrutjak::Test()
{
   for (int i = 0; i < maxColTest; i++) 
   {
      if (incTest==tblTest[i][0])
      {
        Driver(tblTest[i][1]);
        break;
      }
   }
   incTest++;
   if (incTest>maxSecTest) incTest=0;
} 

// ********************************************************** Motor_kru.cpp ***
