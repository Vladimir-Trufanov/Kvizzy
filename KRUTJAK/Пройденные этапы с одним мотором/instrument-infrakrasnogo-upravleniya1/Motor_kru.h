/** Arduino UNO                                             *** Motor_kru.h ***
 * 
 * Драйвер электромотора с использованием широтно-импульсной модуляции на 
 * двух n-канальных полевых транзисторов IRFZ24N и двух p-канальных полевых 
 * транзисторов IRF9Z24N.
 * 
 * v2.1, 26.03.2024                                   Автор:      Труфанов В.Е.
 * Copyright © 2024 tve                               Дата создания: 24.03.2024
**/

#ifndef Motor_kru
#define Motor_kru
 
#pragma once            // обеспечили разовое подключение файла
#include <Arduino.h>    // подключили оьщие функции Arduino

// Текущее состояние мотора
struct Condition
{
   int ValRes;   // считанное значение напряжения с аналогового контакта (0-1023)
   int ValPWM_L; // хранимое значение ШИМ для отправки на затворы левого плеча (0-255)
   int ValPWM_R; // хранимое значение ШИМ для отправки на затворы правого плеча (0-255)
};

class MotorKrutjak 
{
   private:
      int PinRes;       // аналоговый вход, к которому подключен потенциометр
      int PinPWM_L;     // цифровой (ШИМ) выход, к которому подключено левое плечо транзисторов
      int PinPWM_R;     // цифровой (ШИМ) выход, к которому подключено правое плечо

      bool isConnect;        // true - мотор подключен к драйверу
      volatile int ValRes;   // считанное значение напряжения с аналогового контакта (0-1023)
      volatile int ValPWM_L; // хранимое значение ШИМ для отправки на затворы левого плеча (0-255)
      volatile int ValPWM_R; // хранимое значение ШИМ для отправки на затворы правого плеча (0-255)

      // Определяем счетчик секунд теста и матрицу тестирования двигателя.
      // В тесте на каждую скорость выделяется 5 секунд. В матрице указывается 
      // с какой секунды теста запускается указанная скорость.
      int incTest;
      /*
      byte maxColTest=14;
      byte maxSecTest=70; 
      int tblTest[70][2] = {{0,600},{5,700},{10,800},{15,900},{20,1000},{25,1100},{30,512},{35,412},{40,312},{45,212},{50,112},{55,12},{60,-12},{65,512}};
      */
      
      const byte maxColTest=6;
      const byte maxSecTest=30; 
      int tblTest[6][2] = {{0,600},{5,700},{10,512},{15,412},{20,312},{25,512}};
      

   public:
      MotorKrutjak(int _PinPWM_L, int _PinPWM_R, int _PinRes) 
      {
         PinPWM_L = _PinPWM_L;
         PinPWM_R = _PinPWM_R;
         PinRes = _PinRes;
         
         pinMode(PinPWM_L, OUTPUT); // назначили, как выход, контакт левого плеча 
         pinMode(PinPWM_R, OUTPUT); // назначили, как выход, контакт правого плеча
   
         // Выключаем затворы левого плеча
         ValPWM_L = 0; analogWrite(PinPWM_L,ValPWM_L);     
         // Выключаем затворы правого плеча
         ValPWM_R = 0; analogWrite(PinPWM_R,ValPWM_R);
         // Сбрасываем считанное значение напряжения с аналогового контакта
         ValRes = 0;  
         // Отмечаем, что мотор к драйверу подключен              
         isConnect=true;
         // Сбрасываем счетчик секунд теста  
         incTest=0;                 
      }
      // Управлять скоростью мотора и направлением его вращения
      void Driver(int ValRes); 
      // Остановить мотор и отключить его от драйвера 
      void Disconnect(uint32_t _MonitorFreq=9600); 
      // Подключить мотор к драйверу
      void Connect(); 
      // Получить состояние драйвера
      Condition Take();
      // Протестировать мотор
      void Test(); 
};

#endif

// ************************************************************ Motor_kru.h ***
