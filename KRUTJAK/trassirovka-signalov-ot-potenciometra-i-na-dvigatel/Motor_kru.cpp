/** Arduino UNO                                           *** Motor_kru.cpp ***
 * 
 * Драйвер электромотора с использованием широтно-импульсной модуляции на 
 * двух n-канальных полевых транзисторов IRFZ24N и двух p-канальных полевых 
 * транзисторов IRF9Z24N.
 * 
 * v2.1, 26.03.2024                                   Автор:      Труфанов В.Е.
 * Copyright © 2024 tve                               Дата создания: 24.03.2024
**/

#include "Motor_kru.h" 

// ****************************************************************************
// *         Управлять скоростью мотора и направлением его вращения           *
// ****************************************************************************
void MotorKrutjak::Driver() 
{
   ValRes = analogRead(PinRes);                  // считали напряжение с потенциометра
   
   //ValPWM_L = 0;     
   //ValPWM_R = 20;   
   
   if (ValRes<512)
   {
      ValPWM_L = map(ValRes, 0,512, 255,0);      // расчитали напряжение ШИМ
      ValPWM_R = 0;   
   }
   else
   {
      ValPWM_R = map(ValRes, 512,1023, 0,255);   // расчитали напряжение ШИМ
      ValPWM_L = 0;   
   }
   
   
   // Если мотор подключен к драйверу, вращаем мотор
   if (isConnect==true)
   {
      analogWrite(PinPWM_L,ValPWM_L);     
      analogWrite(PinPWM_R,ValPWM_R);        
   }
   // Имитируем вращение мотора при отключенном драйвере:
   // для Arduino Uno, 16 000 000 Гц ощущаемое значение 
   // делителя обращений к двигателю = 8000. 
   else
   {
      inCalc=inCalc+1;
      if (inCalc>8000)
      {
         // Имитируем светодиодом
         // pinMode(13, OUTPUT);
         // digitalWrite(13, !digitalRead(13));
         // Имитируем передачей в порт
         Serial.print("rrr ValRes=");
         Serial.print(ValRes);
         Serial.print(", ValPWM_L=");
         Serial.print(ValPWM_L);
         Serial.print(", ValPWM_R=");
         Serial.println(ValPWM_R);
         // Сбрасываем счетчик
         inCalc=0;
      }
   }
}
// ****************************************************************************
// *                           Получить состояние драйвера                    *
// ****************************************************************************
Condition MotorKrutjak::Take()
{
   Condition values;
   values.ValRes   = ValRes;   // 1024;
   values.ValPWM_L = ValPWM_L; // 250;
   values.ValPWM_R = ValPWM_R; // 10;
   return values;
}
// ****************************************************************************
// *              Остановить мотор и отключить его от драйвера                *
// ****************************************************************************
void MotorKrutjak::Disconnect(uint32_t _MonitorFreq=9600) 
{
   // Устанавливаем признак отключения драйвера
   isConnect=false; 
   // Останавливаем двигатель
   analogWrite(PinPWM_L,0);     
   analogWrite(PinPWM_R,0); 
   // Устанавливаем частоту последовательного монитора
   mFreq = 9600;
   Serial.begin(mFreq);
}
// ****************************************************************************
// *                        Подключить мотор к драйверу                       *
// ****************************************************************************
void MotorKrutjak::Connect() 
{
   isConnect=true; 
}
// ****************************************************************************
// *         Иммитировать работу мотора через последовательный порт           *
// ****************************************************************************

// Условно считаем, что им
// Для Arduino Uno
void imitate()
{
} 

// ********************************************************** Motor_kru.cpp ***
